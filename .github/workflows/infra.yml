name: Infra

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
    paths:
      - 'Makefile'
      - 'docker-compose.yaml'
      - '.checkov.yaml'
      - '.terraform.version'
      - '.github/workflows/infra.yml'
      - 'infra/**'

env:
  REGISTRY: ghcr.io

permissions: read-all

jobs:
  infra:
    runs-on:
      - self-hosted
      - cloudboost
      - us-west-2
      - linux
      - aws
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v3
      # needed for terraform fmt
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version_file: .opentofu-version
      - uses: actions/cache@v3
        name: Cache plugin dir
        with:
          path: infra/.tflint.d/plugins
          key: linux-tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: v0.59.1

      - name: Terraform fmt
        id: fmt
        run: make _tffmt
      - name: Run TFLint
        id: lint
        run: make _tflint
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}
      - name: Terraform Init
        id: init
        run: make _tfinit
      - name: Terraform Validate
        id: validate
        run: make _tfvalidate
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_image_tag: 0.0.0
        run: make _tfplan

      - name: Terraform - Show Plan in PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('infra/tfplan.txt', 'utf8')
            const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Linting ‚öôÔ∏è\`${{ steps.lint.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${plan}
            \`\`\`

            </details>
            ${truncated_message}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12
        with:
          config_file: .checkov.yaml
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        if: github.event_name == 'pull_request'
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      - name: Post Infracost comment
        if: github.event_name == 'pull_request'
        working-directory: ./infra
        run: |
          infracost breakdown --path tfplan.json --format json --out-file infracost.json            
            infracost comment github --path=infracost.json \
            --repo=$GITHUB_REPOSITORY \
            --github-token=${{github.token}} \
            --pull-request=${{github.event.pull_request.number}} \
            --behavior=update
